#!/usr/bin/env python3
"""
Test the improved PDF agent with better equation rendering
"""

import os
import sys
sys.path.append('theoryofeverything')
from unified.agents.pdfagent import PDFAgent
from unified.agents.latexagent import LaTeXAgent

def main():
    """Main function to test the improved PDF agent"""
    # Create the output directories
    os.makedirs("gfx/latex", exist_ok=True)
    os.makedirs("gfx/pdf", exist_ok=True)

    # Create a formula
    formula_name = "test_formula"
    formula_data = {
        "name": "Advanced Mathematical Equations",
        "description": "A collection of advanced mathematical equations with complex notation.",
        "latex": "\\mathcal{L} = -\\frac{1}{4}F_{\\mu\\nu}F^{\\mu\\nu} + \\bar{\\psi}(i\\gamma^\\mu D_\\mu - m)\\psi + \\frac{1}{16\\pi G}R",
        "components": [
            {
                "name": "Einstein Field Equations",
                "latex": "G_{\\mu\\nu} + \\Lambda g_{\\mu\\nu} = \\frac{8\\pi G}{c^4} T_{\\mu\\nu}",
                "description": "The Einstein field equations relate the geometry of spacetime to the distribution of matter within it."
            },
            {
                "name": "Schrödinger Equation",
                "latex": "i\\hbar\\frac{\\partial}{\\partial t}\\Psi(\\mathbf{r},t) = \\hat{H}\\Psi(\\mathbf{r},t)",
                "description": "The Schrödinger equation describes how the quantum state of a physical system changes over time."
            },
            {
                "name": "Maxwell's Equations",
                "latex": "\\begin{align} \\nabla \\cdot \\mathbf{E} &= \\frac{\\rho}{\\epsilon_0} \\\\ \\nabla \\cdot \\mathbf{B} &= 0 \\\\ \\nabla \\times \\mathbf{E} &= -\\frac{\\partial\\mathbf{B}}{\\partial t} \\\\ \\nabla \\times \\mathbf{B} &= \\mu_0\\mathbf{J} + \\mu_0\\epsilon_0\\frac{\\partial\\mathbf{E}}{\\partial t} \\end{align}",
                "description": "Maxwell's equations describe how electric and magnetic fields are generated by charges, currents, and changes of each other."
            }
        ]
    }

    # Create the LaTeX agent
    latex_agent = LaTeXAgent(output_dir="gfx/latex")

    # Generate LaTeX content
    latex_content = f"""
\\documentclass{{article}}
\\usepackage{{amsmath}}
\\usepackage{{amssymb}}
\\usepackage{{amsfonts}}
\\usepackage{{physics}}
\\title{{{formula_data['name']}}}
\\author{{Theory of Everything}}
\\date{{\\today}}

\\begin{{document}}

\\maketitle

\\section*{{{formula_data['name']}}}

{formula_data['description']}

\\begin{{align}}
{formula_data['latex']}
\\end{{align}}

\\section*{{Components}}

"""

    for component in formula_data['components']:
        latex_content += f"""
\\subsection*{{{component['name']}}}

{component['description']}

\\begin{{align}}
{component['latex']}
\\end{{align}}
"""

    latex_content += "\\end{document}"

    # Save the LaTeX content to a file
    latex_file = latex_agent.save_latex(latex_content, f"{formula_name}.tex")
    print(f"LaTeX file saved to: {latex_file}")

    # Create the PDF agent
    pdf_agent = PDFAgent(output_dir="gfx/pdf")

    # Generate PDF from LaTeX content
    pdf_file = pdf_agent.generate_pdf_from_latex(latex_content=latex_content, output=f"{formula_name}.pdf")
    print(f"PDF file saved to: {pdf_file}")

    # Check if the file exists
    if pdf_file.startswith("Error:"):
        print(f"Error generating PDF: {pdf_file}")
    elif os.path.exists(pdf_file):
        print(f"PDF file size: {os.path.getsize(pdf_file)} bytes")
        print("\nThe PDF file now contains improved equation rendering with Unicode symbols.")
        print("While not as perfect as LaTeX typesetting, it's much more readable than raw LaTeX code.")
    else:
        print(f"Error: PDF file not found: {pdf_file}")

if __name__ == "__main__":
    main()
